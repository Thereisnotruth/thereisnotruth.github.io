{"version":3,"file":"component---src-pages-archive-js-a03f06414dd0b62d51a3.js","mappings":"8KA+GA,UAvGoB,SAAC,GAAc,IAAZA,EAAW,EAAXA,KACfC,EAAO,GACPC,EAAS,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC1C,MAAO,MAAO,MAAO,MAAO,OAC5CF,EAAKG,OAAOC,MAAMC,KAAI,SAACC,GACrBC,QAAQC,IAAIF,GACZ,IAAMG,EAAOH,EAAKI,YAAYT,KAAKU,MAAM,KAAK,GACxCC,EAAQN,EAAKI,YAAYT,KAAKU,MAAM,KAAK,GACzCE,EAAMP,EAAKI,YAAYT,KAAKU,MAAM,KAAK,QAC1BG,IAAfb,EAAKQ,IACPR,EAAKQ,GAAQ,GACbR,EAAKQ,GAAMG,GAAS,GACpBX,EAAKQ,GAAMG,GAAOC,GAAO,CAACP,IACIQ,MAArBb,EAAKQ,GAAMG,IACpBX,EAAKQ,GAAMG,GAAS,GACpBX,EAAKQ,GAAMG,GAAOC,GAAO,CAACP,SACUQ,IAA3Bb,EAAKQ,GAAMG,GAAOC,GAC3BZ,EAAKQ,GAAMG,GAAOC,GAAO,CAACP,GAE1BL,EAAKQ,GAAMG,GAAOC,GAAKE,KAAKT,MAGhCC,QAAQC,IAAIP,GAuDZ,OACE,gBAAC,IAAD,KACE,uBAAKe,UAAU,QACb,qCACA,uBAAKA,UAAU,WA1DJ,WACf,IAAMC,EAAM,GAEZ,IAAK,IAAIR,KAAQR,EASf,IAAK,IAAIW,KARTK,EAAIF,KACF,uBACEC,UAAU,eACVE,IAAKT,GAEJA,IAGaR,EAAKQ,GASrB,IAAK,IAAII,KARTI,EAAIF,KACJ,uBACEC,UAAU,gBACVE,IAAKN,GAEJV,EAAOU,EAAQ,KAGFX,EAAKQ,GAAMG,GACzBK,EAAIF,KAAK,uBACPC,UAAU,cACVE,IAAKL,GAEJA,IAGHZ,EAAKQ,GAAMG,GAAOC,GAAKR,KAAI,SAACC,EAAMa,GACnB,IAAVA,GACDF,EAAIF,KACJ,uBACEC,UAAU,cACVE,IAAKC,KAGTF,EAAIF,KACF,gBAAC,EAAAK,KAAD,CACEJ,UAAU,OACVK,GAAE,MAAQf,EAAKgB,MACf,uBACEN,UAAU,gBACVE,IAAKZ,EAAKI,YAAYa,KAErBjB,EAAKI,YAAYc,YAOhC,OAAOP,EAOAQ","sources":["webpack://gatsby-starter-default/./src/pages/archive.js"],"sourcesContent":["import * as React from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\n\r\nimport \"../styles/card.css\"\r\nimport \"../styles/archive.css\"\r\n\r\nconst ArchivePage = ({ data }) => {\r\n  const date = {};\r\n  const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\",\r\n                  \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n  data.allMdx.nodes.map((node) => {\r\n    console.log(node)\r\n    const year = node.frontmatter.date.split('.')[0];\r\n    const month = node.frontmatter.date.split('.')[1];\r\n    const day = node.frontmatter.date.split('.')[2];\r\n    if (date[year] === undefined) {\r\n      date[year] = {};\r\n      date[year][month] = {};\r\n      date[year][month][day] = [node];\r\n    } else if (date[year][month] == undefined) {\r\n      date[year][month] = {};\r\n      date[year][month][day] = [node];\r\n    } else if (date[year][month][day] === undefined) {\r\n      date[year][month][day] = [node];\r\n    } else {\r\n      date[year][month][day].push(node);\r\n    }\r\n  })\r\n  console.log(date);\r\n  const showDate = () => {\r\n    const ret = [];\r\n    \r\n    for (let year in date) { \r\n      ret.push(\r\n        <div\r\n          className=\"archive-year\"\r\n          key={year}\r\n        >\r\n          {year}\r\n        </div>);\r\n      \r\n      for (let month in date[year]) {\r\n        ret.push(\r\n        <div\r\n          className=\"archive-month\"\r\n          key={month}\r\n        >\r\n          {months[month - 1]}\r\n        </div>);\r\n        \r\n        for (let day in date[year][month]) {\r\n          ret.push(<div\r\n            className=\"archive-day\"\r\n            key={day}\r\n          >\r\n            {day}\r\n          </div>)\r\n          \r\n          date[year][month][day].map((node, index) => {\r\n            if(index !== 0) {\r\n              ret.push(\r\n              <div\r\n                className=\"archive-day\"\r\n                key={index}\r\n              />)\r\n            }\r\n            ret.push(\r\n              <Link\r\n                className=\"link\"\r\n                to={`../${node.slug}`}>\r\n                <div\r\n                  className=\"archive-title\"\r\n                  key={node.frontmatter.idx}\r\n                >\r\n                  {node.frontmatter.title}\r\n                </div>\r\n              </Link>)\r\n          });\r\n        }\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n  return (\r\n    <Layout>\r\n      <div className=\"card\">\r\n        <h2>Archive</h2>\r\n        <div className=\"archive\">\r\n          {showDate()}\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\nexport const query = graphql`\r\n  query {\r\n    allMdx(sort: {fields: frontmatter___idx, order: DESC}) {\r\n      nodes {\r\n        id\r\n        slug\r\n        frontmatter {\r\n          title\r\n          date(formatString: \"YYYY.MM.DD\")\r\n          idx\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\nexport default ArchivePage\r\n"],"names":["data","date","months","allMdx","nodes","map","node","console","log","year","frontmatter","split","month","day","undefined","push","className","ret","key","index","Link","to","slug","idx","title","showDate"],"sourceRoot":""}