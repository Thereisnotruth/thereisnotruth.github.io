{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/algorithm/221006_algo_2/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"플로이드-워셜 알고리즘\",\n  \"date\": \"2022-10-06\",\n  \"category\": \"algorithm\",\n  \"idx\": \"36\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"\\uD50C\\uB85C\\uC774\\uB4DC-\\uC6CC\\uC15C \\uC54C\\uACE0\\uB9AC\\uC998\"), mdx(\"p\", null, \"\\uADF8\\uB798\\uD504 \\uC0C1\\uC5D0\\uC11C \\uAC00\\uB2A5\\uD55C \\uBAA8\\uB4E0 \\uB178\\uB4DC \\uC30D\\uB4E4\\uC5D0 \\uB300\\uD574 \\uCD5C\\uB2E8 \\uAC70\\uB9AC\\uB97C \\uAD6C\\uD558\\uB294 \\uC54C\\uACE0\\uB9AC\\uC998\\uC774\\uB2E4.\"), mdx(\"p\", null, \"\\uAC19\\uC740 \\uCD5C\\uB2E8 \\uAC70\\uB9AC \\uC54C\\uACE0\\uB9AC\\uC998\\uC778 \\uB2E4\\uC775\\uC2A4\\uD2B8\\uB77C \\uC54C\\uACE0\\uB9AC\\uC998\\uACFC\\uB294 \\uB2EC\\uB9AC \\uBAA8\\uB4E0 \\uB178\\uB4DC \\uC30D\\uC5D0 \\uB300\\uD574 \\uCD5C\\uB2E8 \\uAC70\\uB9AC\\uB97C \\uAD6C\\uD560 \\uC218 \\uC788\\uACE0, \\uC74C\\uC758 \\uAC00\\uC911\\uCE58\\uB97C \\uAC00\\uC9C4 \\uAC04\\uC120\\uC774 \\uADF8\\uB798\\uD504\\uC5D0 \\uC788\\uC5B4\\uB3C4 \\uC801\\uC6A9\\uD560 \\uC218 \\uC788\\uB2E4\\uB294 \\uAC83\\uC774 \\uD2B9\\uC9D5\\uC774\\uB2E4.\"), mdx(\"p\", null, \"\\uC2DC\\uC791 \\uB178\\uB4DC, \\uACBD\\uC720\\uC9C0, \\uB3C4\\uCC29 \\uB178\\uB4DC\\uC5D0 \\uB300\\uD574 \\uBC18\\uBCF5\\uBB38\\uC744 \\uB3CC\\uC544\\uC57C\\uD558\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uC2DC\\uAC04 \\uBCF5\\uC7A1\\uB3C4\\uB294 O(V^3) \\uC774\\uB2E4.\"), mdx(\"p\", null, \"\\uCF54\\uB4DC\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"java\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"import java.util.*;\\n\\npublic class FWAlgorithm {\\n\\n\\tstatic final int INF = 987654321;\\n\\tstatic int N, distance[][];\\n\\tpublic static void main(String[] args) {\\n\\n\\t\\tScanner sc = new Scanner(System.in);\\n\\t\\tN = sc.nextInt();\\n\\t\\tdistance = new int[N][N];\\n    // \\uC785\\uB825\\uC740 \\uC778\\uC811 \\uD589\\uB82C\\uB85C \\uC8FC\\uC5B4\\uC9C4\\uB2E4.\\n\\t\\tfor(int i=0; i<N; ++i) {\\n\\t\\t\\tfor(int j=0; j<N; ++j) {\\n\\t\\t\\t\\tdistance[i][j] = sc.nextInt();\\n\\t\\t\\t\\tif(i != j && distance[i][j]==0) {\\n          //\\uC790\\uAE30\\uC790\\uC2E0\\uC73C\\uB85C\\uC758 \\uC778\\uC811 \\uC815\\uBCF4\\uAC00 \\uC544\\uB2C8\\uACE0 \\uC778\\uC811\\uD574\\uC788\\uC9C0 \\uC54A\\uB2E4\\uBA74 INF\\uB85C \\uCC44\\uC6B0\\uAE30\\n\\t\\t\\t\\t\\tdistance[i][j]=INF;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor (int k = 0; k < N; k++) { // \\uACBD\\uC720\\uC9C0\\n\\t\\t\\tfor (int i = 0; i < N; i++) { // \\uC2DC\\uC791 \\uB178\\uB4DC\\n\\t\\t\\t\\tfor (int j = 0; j < N; j++) { // \\uB3C4\\uCC29 \\uB178\\uB4DC\\n          distnace[i][j] = Math.min(distance[i][j], distance[i][k] + distance[k][j]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor (int i = 0; i < N; i++) {\\n\\t\\t\\tfor (int j = 0; j < N; j++) {\\n\\t\\t\\t\\tSystem.out.print(distance[i][j] + \\\" \\\");\\n\\t\\t\\t}\\n\\t\\t\\tSystem.out.println();\\n\\t\\t}\\n\\n\\t}\\n\\n\\n}\\n\"), \"\\n        \"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"플로이드-워셜 알고리즘","date":"2022.10.06","category":"algorithm"}}},"pageContext":{"slug":"algorithm/221006_algo_2/"}},
    "staticQueryHashes": ["63159454"]}