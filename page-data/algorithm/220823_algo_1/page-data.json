{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/algorithm/220823_algo_1/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"최소 신장 트리\",\n  \"date\": \"2022-08-23\",\n  \"category\": \"algorithm\",\n  \"idx\": \"9\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"\\uCD5C\\uC18C \\uC2E0\\uC7A5\\uD2B8\\uB9AC\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uC0AC\\uC6A9\\uD55C \\uAC04\\uC120\\uB4E4\\uC758 \\uAC00\\uC911\\uCE58 \\uD569\\uC774 \\uCD5C\\uC18C\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uAC04\\uC120 \\uAC00\\uC911\\uCE58\\uB97C \\uACE0\\uB824\\uD558\\uC5EC \\uCD5C\\uC18C \\uBE44\\uC6A9\\uC758 \\uC2E0\\uC7A5 \\uD2B8\\uB9AC \\uC120\\uD0DD\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uADF8\\uB798\\uD504\\uC758 \\uBAA8\\uB4E0 \\uB178\\uB4DC \\uD3EC\\uD568\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uBAA8\\uB4E0 \\uB178\\uB4DC\\uB294 \\uC11C\\uB85C \\uC5F0\\uACB0\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uC0AC\\uC774\\uD074 X\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Kruskal \\uC54C\\uACE0\\uB9AC\\uC998, Prim \\uC54C\\uACE0\\uB9AC\\uC998\\uC73C\\uB85C \\uAD6C\\uD604\"))), mdx(\"h3\", null, \"Kruskal \\uC54C\\uACE0\\uB9AC\\uC998\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uAC00\\uC7A5 \\uC801\\uC740 \\uBE44\\uC6A9\\uC73C\\uB85C \\uBAA8\\uB4E0 \\uB178\\uB4DC \\uC5F0\\uACB0\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uAC04\\uC120 \\uC120\\uD0DD \\uAE30\\uBC18\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uC11C\\uB85C\\uC18C \\uC9D1\\uD569(Disjoint Set) / Union-Find \\uC54C\\uACE0\\uB9AC\\uC998 \\uC801\\uC6A9\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uADF8\\uB798\\uD504\\uB97C \\uAC04\\uC120 \\uB9AC\\uC2A4\\uD2B8\\uB85C \\uD45C\\uD604\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uC21C\\uC11C\"), mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uBAA8\\uB4E0 \\uAC00\\uC911\\uCE58\\uB97C \\uC624\\uB984\\uCC28\\uC21C\\uC73C\\uB85C \\uC815\\uB82C\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uAC00\\uC911\\uCE58\\uAC00 \\uAC00\\uC7A5 \\uC791\\uC740 \\uAC04\\uC120 \\uC120\\uD0DD\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uD574\\uB2F9 \\uAC04\\uC120\\uC774 \\uC5F0\\uACB0\\uD558\\uB824\\uB294 \\uB178\\uB4DC\\uAC00 \\uC11C\\uB85C \\uC5F0\\uACB0\\uB418\\uC9C0 \\uC54A\\uC740 \\uC0C1\\uD0DC\\uB77C\\uBA74 2\\uAC1C\\uC758 \\uB178\\uB4DC \\uC5F0\\uACB0\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"1~3 \\uACFC\\uC815\\uC744 \\uBC18\\uBCF5\"))))), mdx(\"h3\", null, \"Disjoint Set  \\uC11C\\uB85C\\uC18C \\uC9D1\\uD569\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uACF5\\uD1B5 \\uC6D0\\uC18C\\uAC00 \\uC5C6\\uB294 \\uB450 \\uC9D1\\uD569\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"union, find \\uB450 \\uAC00\\uC9C0 \\uC5F0\\uC0B0\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"union\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB450 \\uAC1C\\uC758 \\uC6D0\\uC18C\\uAC00 \\uAC01\\uAC01 \\uD3EC\\uD568\\uB418\\uC5B4 \\uC788\\uB294 \\uC9D1\\uD569\\uC744 \\uD558\\uB098\\uB85C \\uD569\\uCE68\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"find\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD2B9\\uC815\\uD55C \\uC6D0\\uC18C\\uAC00 \\uC18D\\uD55C \\uC9D1\\uD569\\uC774 \\uC5B4\\uB5A4 \\uC9D1\\uD569\\uC778\\uC9C0 \\uCC3E\\uC74C\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uD558\\uB098\\uC758 \\uD2B8\\uB9AC\\uB97C \\uD558\\uB098\\uC758 \\uC9D1\\uD569\\uC73C\\uB85C \\uBCFC \\uB54C, find\\uB294 \\uD2B8\\uB9AC\\uC758 \\uB8E8\\uD2B8 \\uB178\\uB4DC\\uB97C \\uCC3E\\uACE0, \\uADF8 \\uB8E8\\uD2B8 \\uB178\\uB4DC\\uB97C \\uD1B5\\uD574 \\uD2B9\\uC815 \\uC9D1\\uD569 \\uD45C\\uD604\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"union\\uC740 \\uB450 \\uC6D0\\uC18C\\uC5D0 \\uB300\\uD574 find \\uC5F0\\uC0B0\\uC744 \\uC218\\uD589\\uD558\\uC5EC \\uAC01\\uAC01\\uC758 \\uB8E8\\uD2B8 \\uB178\\uB4DC\\uB97C \\uCC3E\\uACE0, \\uD55C \\uCABD\\uC758 \\uB8E8\\uD2B8 \\uB178\\uB4DC\\uB97C \\uB2E4\\uB978 \\uCABD\\uC5D0 \\uC5F0\\uACB0\\uD568\\uC73C\\uB85C\\uC368 \\uD558\\uB098\\uC758 \\uD2B8\\uB9AC\\uB85C \\uB9CC\\uB4DC\\uB294 \\uD569\\uC9D1\\uD569 \\uC5F0\\uC0B0 \\uC218\\uD589\"))), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"java\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"static int find_parent(int x) {\\n\\tif (parent[x] != x) {\\n\\t\\treturn find_parent(parent[x]);\\n\\t}\\n\\treturn x;\\n}\\n\\n// \\uACBD\\uB85C \\uC555\\uCD95 \\uAE30\\uBC95 \\uC801\\uC6A9\\nstatic int find_parent_compress(int x){\\n\\tif (parent[x] != x) {\\n\\t\\tparent[x] = find_parent(parent[x]);\\n\\t}\\n\\treturn parent[x];\\n}\\n\\nstatic void union_parent(int a, int b){\\n\\ta = find_parent(a);\\n\\tb = find_parent(b);\\n\\t\\n\\tif (a < b) {\\n\\t\\tparent[b] = a;\\n\\t} else {\\n\\t\\tparent[a] = b;\\n\\t}\\n}\\n\\npublic static void main (String[] args) {\\n\\tScanner sc = new Scanner(System.in);\\n\\tint V = sc.nextInt();\\n\\tint E = sc.nextInt();\\n\\n\\tfor (int i = 1; i <= V; i++) {\\n\\t\\tparent[i] = i; // \\uBD80\\uBAA8 \\uD14C\\uC774\\uBE14 \\uC790\\uAE30 \\uC790\\uC2E0\\uC73C\\uB85C \\uCD08\\uAE30\\uD654\\n\\t}\\n\\t\\n\\tfor (int i = 1; i <= E; i++) {\\n\\t\\tint a = sc.nextInt();\\n\\t\\tint b = sc.nextInt();\\n\\t\\t\\n\\t\\t// \\uAC01 \\uAC04\\uC120\\uB9C8\\uB2E4 \\uC720\\uB2C8\\uC628 \\uC5F0\\uC0B0\\n\\t\\tunion_parent(parent, a, b);\\n\\t}\\n}\"), \"\\n        \"), mdx(\"h3\", null, \"\\uD504\\uB9BC \\uC54C\\uACE0\\uB9AC\\uC998\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uC2DC\\uC791 \\uC815\\uC810\\uC744 \\uAE30\\uC900\\uC73C\\uB85C \\uAC00\\uC7A5 \\uC791\\uC740 \\uAC04\\uC120\\uACFC \\uC5F0\\uACB0\\uB41C \\uC815\\uC810\\uC744 \\uC120\\uD0DD\\uD558\\uC5EC \\uC2E0\\uC7A5 \\uD2B8\\uB9AC \\uD655\\uC7A5\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Heap \\uC774\\uC6A9\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uC815\\uC810 \\uC120\\uD0DD \\uAE30\\uBC18\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uADF8\\uB798\\uD504\\uB97C \\uC778\\uC811 \\uB9AC\\uC2A4\\uD2B8\\uB85C \\uD45C\\uD604\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uC21C\\uC11C\"), mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uC784\\uC758\\uC758 \\uAC04\\uC120 \\uC120\\uD0DD\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uC120\\uD0DD\\uD55C \\uAC04\\uC120\\uC758 \\uC815\\uC810\\uC73C\\uB85C\\uBD80\\uD130 \\uAC00\\uC7A5 \\uB0AE\\uC740 \\uAC00\\uC911\\uCE58\\uB97C \\uAC16\\uB294 \\uC815\\uC810 \\uC120\\uD0DD\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uBAA8\\uB4E0 \\uC815\\uC810\\uC774 \\uC120\\uD0DD\\uB420 \\uB54C\\uAE4C\\uC9C0 \\uBC18\\uBCF5\"))))), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"java\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"// O(N^2) \\uC54C\\uACE0\\uB9AC\\uC998 (\\uBC30\\uC5F4 \\uC774\\uC6A9)\\npublic static void main (String[] args) {\\n\\tScanner sc = new Scanner(System.in);\\n\\t\\n\\tN = sc.nextInt();\\n\\tint[][] input = new int[N][N];\\n\\tint[] minEdge = new int[N];\\n\\t\\n\\tboolean[] V = new boolean[N];\\n\\n\\tfor (int i = 0; i < N; i++) {\\n\\t\\tfor (int j = 0; j < N; j++) {\\n\\t\\t\\tinput[i][j] = sc.nextInt();\\n\\t\\t}\\n\\t\\tminEdge[i] = Integer.MAX_VALUE;\\n\\t}\\n\\n\\tint minVertex, min, result = 0;\\n\\t\\n\\tminEdge[0] = 0;\\n\\t\\n\\tfor (int c = 0; c < N; c++) {\\n\\t\\tmin = Integer.MAX_VALUE;\\n\\t\\tminVertex = 0;\\n\\t\\t// priority queue\\uB85C \\uB300\\uCCB4 \\uAC00\\uB2A5\\n\\n\\t\\t// V\\uC640 \\uC5F0\\uACB0\\uB41C \\uAC04\\uC120 \\uC911 \\uBE44\\uC6A9\\uC774 \\uCD5C\\uC18C\\uC778 \\uAC04\\uC120, \\uADF8 \\uAC04\\uC120\\uACFC \\uC5F0\\uACB0\\uB41C \\uB178\\uB4DC\\uB97C \\uCC3E\\uB294\\uB2E4\\n\\t\\tfor (int i = 0; i < N; i++){\\n\\t\\t\\tif (!V[i] && min > minEdge[i]) {\\n\\t\\t\\t\\tmin = minEdge[i];\\n\\t\\t\\t\\tminVertex = i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\n\\t\\t// \\uD574\\uB2F9 \\uB178\\uB4DC\\uB97C V\\uC5D0 \\uD3EC\\uD568\\uC2DC\\uD0A8\\uB2E4.\\n\\t\\tresult += min;\\n\\t\\tV[minVertex] = true;\\n\\t\\t\\n\\t\\tfor (int i = 0; i < N; i++) {\\n\\t\\t\\t// V\\uC5D0\\uC11C \\uD574\\uB2F9 \\uB178\\uB4DC\\uAE4C\\uC9C0 \\uAC00\\uB294 \\uCD5C\\uC18C \\uBE44\\uC6A9 \\uAC04\\uC120 \\uAC31\\uC2E0\\n\\t\\t\\tif (!V[i] && input[minVertex][i] != 0 && minEdge[i] > input[minVertex][i]) {\\n\\t\\t\\t\\tminEdge[i] = iput[minVertex][i];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tSystem.out.println(result);\\n}\"), \"\\n        \"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"java\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"// O(E log V) \\uC54C\\uACE0\\uB9AC\\uC998 (Priority Queue \\uC774\\uC6A9)\\nstatic class Vertex implements Comparable<Vertex> {\\n\\tint n, edge;\\n\\tpublic Vertex(int n, int edge) {\\n\\t\\tsuper();\\n\\t\\tthis.n = n;\\n\\t\\tthis.edge = edge;\\n\\t}\\n\\t@Override\\n\\tpublic int compareTo(Vertex o) {\\n\\t\\treturn this.edge - o.edge;\\n\\t}\\n}\\npublic static void main (String[] args) {\\n\\tScanner sc = new Scanner(System.in);\\n\\t\\n\\tN = sc.nextInt();\\n\\tint[][] input = new int[N][N];\\n\\tint[] minEdge = new int[N];\\n\\tPrioirtyQueue<Vertex> queue = new PriorityQueue<>();\\n\\t\\n\\tboolean[] V = new boolean[N];\\n\\n\\tfor (int i = 0; i < N; i++) {\\n\\t\\tfor (int j = 0; j < N; j++) {\\n\\t\\t\\tinput[i][j] = sc.nextInt();\\n\\t\\t}\\n\\t\\tminEdge[i] = Integer.MAX_VALUE;\\n\\t}\\n\\n\\tint result = 0, nodeCount = 0;\\n\\t\\n\\t// \\uC784\\uC758\\uC758 \\uB178\\uB4DC(0\\uBC88 \\uB178\\uB4DC)\\uB97C \\uD3EC\\uD568\\uC2DC\\uD0A8\\uB2E4\\n\\tminEdge[0] = 0;\\n\\tqueue.offer(new Vertex(0, 0));\\n\\t\\n\\twhile (!queue.isEmpty()) {\\n\\t\\tVertex minVertex = queue.poll();\\n\\t\\tif (V[minVertex.n]) continue;\\n\\t\\tresult += minVertex.edge;\\n\\t\\tV[minVertex.n] = true;\\n\\t\\tif(++nodeCount == N) break;\\n\\n\\t\\tfor (int to = 0; to < N; to++) {\\n\\t\\t\\tif (!V[to] && input[minVertex.n][to] != 0 && minEdge[to] > input[minVertex.n][to] {\\n\\t\\t\\t\\tminEdge[to] = input[minVertex.n][to];\\n\\t\\t\\t\\tqueue.offer(new Vertex(to, inut[minVerted.n][to]));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t\\n\\t\\n\\tSystem.out.println(result);\\n}\"), \"\\n        \"), mdx(\"h3\", null, \"Kruskal vs Prim\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uD504\\uB9BC\\uC740 \\uC0AC\\uC774\\uD074 \\uAC00\\uB2A5\\uC131\\uC774 \\uC5C6\\uC74C\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uD06C\\uB8E8\\uC2A4\\uCE7C\\uC740 \\uC0AC\\uC774\\uD074\\uC774 \\uC774\\uB8E8\\uC5B4\\uC9C0\\uB294\\uC9C0 \\uD56D\\uC0C1 \\uD655\\uC778 (find(a) == find(b))\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uAC04\\uC120\\uC758 \\uAC1C\\uC218\\uAC00 \\uC801\\uC740 \\uACBD\\uC6B0 \\uD06C\\uB8E8\\uC2A4\\uCE7C\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uAC04\\uC120\\uC758 \\uAC1C\\uC218\\uAC00 \\uB9CE\\uC740 \\uACBD\\uC6B0 \\uD504\\uB9BC\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"최소 신장 트리","date":"2022.08.23","category":"algorithm"}}},"pageContext":{"slug":"algorithm/220823_algo_1/"}},
    "staticQueryHashes": ["63159454"]}